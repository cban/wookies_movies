// Mocks generated by Mockito 5.4.6 from annotations
// in wookies_movies/test/repository/movies_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wookies_movies/data/local/shared_pref_data.dart' as _i5;
import 'package:wookies_movies/data/model/movies/movies_response.dart' as _i2;
import 'package:wookies_movies/data/remote/api_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMoviesResponse_0 extends _i1.SmartFake
    implements _i2.MoviesResponse {
  _FakeMoviesResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i3.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.MoviesResponse> getMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getMovies, []),
            returnValue: _i4.Future<_i2.MoviesResponse>.value(
              _FakeMoviesResponse_0(this, Invocation.method(#getMovies, [])),
            ),
          )
          as _i4.Future<_i2.MoviesResponse>);

  @override
  _i4.Future<_i2.MoviesResponse> searchMovies(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchMovies, [query]),
            returnValue: _i4.Future<_i2.MoviesResponse>.value(
              _FakeMoviesResponse_0(
                this,
                Invocation.method(#searchMovies, [query]),
              ),
            ),
          )
          as _i4.Future<_i2.MoviesResponse>);
}

/// A class which mocks [SharedPrefData].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefData extends _i1.Mock implements _i5.SharedPrefData {
  MockSharedPrefData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheMovies(_i2.MoviesResponse? response) =>
      (super.noSuchMethod(
            Invocation.method(#cacheMovies, [response]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.MoviesResponse?> getCachedMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedMovies, []),
            returnValue: _i4.Future<_i2.MoviesResponse?>.value(),
          )
          as _i4.Future<_i2.MoviesResponse?>);

  @override
  _i4.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
